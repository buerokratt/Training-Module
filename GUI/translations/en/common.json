{
  "global": {
    "save": "Save",
    "add": "Add",
    "edit": "Edit",
    "delete": "Delete",
    "cancel": "Cancel",
    "modifiedAt": "Last modified at",
    "addNew": "Add new",
    "dependencies": "Dependencies",
    "language": "Language",
    "choose": "Choose",
    "search": "Search",
    "notification": "Notification",
    "notificationError": "Error",
    "active": "Active",
    "activate": "Activate",
    "deactivate": "Deactivate",
    "on": "On",
    "off": "Off",
    "back": "Back",
    "from": "From",
    "to": "To",
    "view": "View",
    "resultCount": "Result count",
    "paginationNavigation": "Pagination navigation",
    "gotoPage": "Goto page",
    "name": "Name",
    "yes": "Yes",
    "no": "No",
    "removeValidation": "Are you sure?",
    "logout": "Logout",
    "enabled": "Enabled",
    "reset": "Reset",
    "present": "Present",
    "away": "Away",
    "idCode": "ID code",
    "status": "Status",
    "anonymous": "Anonymous",
    "title": "Title",
    "missing": "Missing",
    "updatingDataHead": "Please wait",
    "updatingDataBody": "Processing request...",
    "days": {
      "monday": "Monday",
      "tuesday": "Tuesday",
      "wednesday": "Wednesday",
      "thursday": "Thursday",
      "friday": "Friday",
      "saturday": "Saturday",
      "sunday": "Sunday"
    }
  },
  "mainMenu": {
    "menuLabel": "Main navigation",
    "closeMenu": "Close menu",
    "openIcon": "Open menu icon",
    "closeIcon": "Close menu icon"
  },
  "training": {
    "intent": "intent",
    "response": "response",
    "conditions": "Conditions",
    "form": "Form",
    "slot": "Slot",
    "checkpoints": "Checkpoints",
    "value": "Value",
    "newIntent": "New intent",
    "intentName": "Intent name",
    "intents": {
      "title": "Intents",
      "commonIntents": "Common intents",
      "searchIntentPlaceholder": "Search for intent",
      "addToModel": "Add to model",
      "removeFromModel": "Remove from model",
      "examples": "Examples",
      "example": "Example",
      "amountOfExamples": "Amount of examples",
      "intentInModel": "Intent is in model",
      "upload": "Upload examples",
      "download": "Download examples",
      "moreFromGithub": "More info from Github",
      "entity": "Entity",
      "entityName": "Entity name",
      "deleteExample": "Delete example",
      "deleteRegex": "Delete regex",
      "deleteRegexExample": "Delete regex example",
      "followupTraining": "Intents follow-up training",
      "entities": "Entities",
      "regex": "REGEX",
      "regexExampleTitle": "Regex example title",
      "deleteEntity": "Delete entity",
      "turnExampleIntoIntent": "Turn into an intent",
      "turnIntoService": "Turn into a Service",
      "connectToService": "Connect to a Service",
      "connectToServiceTooltip": "To connect the service, the service must be previously created in the Services module",
      "changeConnectedService": "Change service",
      "deleteTooltip": "Only the Intent is deleted and the service remains, its deletion can be done in the Service module",
      "error": {
        "turnExampleIntoIntent": "Unable to turn this example into intent"
      }
    },
    "responses": {
      "title": "Responses",
      "searchResponse": "Search response",
      "response": "Response",
      "newResponseTextPlaceholder": "Add a response text for this template",
      "deleteResponse": "Delete response",
      "deleteStory": "Delete story",
      "responseName": "Response name",
      "responseText": "Response text",
      "addNewResponse": "Add new response"
    },
    "configuration": {
      "title": "Configuration",
      "pipeline": "Pipeline",
      "epochs": "Epochs",
      "randomSeed": "Random seed",
      "threshold": "Threshold",
      "policies": "Policies",
      "priority": "Priority",
      "maxHistory": "Max history",
      "checkForContradictions": "Check for contradictions",
      "coreFallbackThreshold": "Core fallback threshold",
      "moreFromKratid": "More info from kratid.ee"
    },
    "stories": {
      "title": "Stories and rules",
      "stories": "Stories",
      "rules": "Rules",
      "entityWarning": "There are two entities with the same name in intent '{{intent}}'"
    },
    "slots": {
      "title": "Slots",
      "titleOne": "Slot",
      "newSlot": "New slot",
      "mapping": "Mapping",
      "slotName": "Slot name",
      "slotType": "Slot type",
      "influenceConversation": "Influence conversation",
      "deleteSlot": "Delete slot"
    },
    "forms": {
      "title": "Forms",
      "titleOne": "Form",
      "form": "Form name",
      "formName": "utter_ask_",
      "requiredSlots": "Required slots",
      "ignoredIntents": "Ignored intents",
      "deleteForm": "Delete form"
    },
    "actions": {
      "title": "Actions"
    },
    "historicalConversations": {
      "title": "History",
      "search": "Search conversations",
      "startTime": "Start time",
      "endTime": "End time",
      "name": "Name",
      "label": "Label",
      "comment": "Comment",
      "appeals": "Client messages",
      "appeal": "Client message",
      "searchIntent": "Search intent",
      "searchAppeals": "Search apeals",
      "deleteAppeal": "Delete appeal"
    },
    "mba": {
      "intentsOverview": "Intents overview",
      "modelOverview": "Report overview",
      "modelInUse": "Model in use",
      "trained": "Trained",
      "precision": "Precision",
      "testcases": "Testcases",
      "intent": "Intent",
      "examples": "Examples",
      "recall": "Recall",
      "f1": "F1-score",
      "f1Tooltip": "The harmonic averafe of precision and recall",
      "suggestion": "Suggestion",
      "addExamples": "Add new examples",
      "gotoExample": "Go to example",
      "modelComparison": "Model comparison",
      "selectedModel": "Selected model",
      "downloadModel": "Download model",
      "downloadDataset": "Download dataset",
      "viewIntentsPrecision": "View intents precision",
      "activateModel": "Activate model",
      "allModels": "All models",
      "lastTrained": "Last trained",
      "state": "State",
      "live": "Live",
      "compareResults": "Compare results",
      "deleteModel": "Delete model",
      "modelResults": "Model results",
      "testStoryExists": "Test story exists",
      "lastModified": "Last modified at {{date}}"
    },
    "trainNew": {
      "title": "Traing and test",
      "lastTrained": "Last trained {{date}}, {{time}}",
      "trainNow": "Train now",
      "warning": "NB! Last training failed. ({{date}}, {{time}})",
      "trainingTitle": "Training and testing data",
      "folds": "Number of folds",
      "repeatTraining": "Repeat training",
      "planTitle": "Planned training",
      "date": "Starting from",
      "days": "Days",
      "time": "Training time"
    }
  },
  "roles": {
    "ROLE_ADMINISTRATOR": "Administrator",
    "ROLE_SERVICE_MANAGER": "Service manager",
    "ROLE_CUSTOMER_SUPPORT_AGENT": "Customer support",
    "ROLE_CHATBOT_TRAINER": "Chatbot trainer",
    "ROLE_ANALYST": "Analyst",
    "ROLE_UNAUTHENTICATED": "Unauthenticated"
  },
  "settings": {
    "users": {
      "title": "Users",
      "name": "Name",
      "idCode": "ID code",
      "role": "Role",
      "displayName": "User title",
      "email": "E-mail",
      "addUser": "Add user",
      "editUser": "Edit user",
      "deleteUser": "Delete user",
      "fullName": "First- and lastname",
      "userRoles": "User role(s)",
      "autoCorrector": "Auto corrector",
      "emailNotifications": "Notifications to e-mail",
      "soundNotifications": "Sound notifications",
      "popupNotifications": "Popup notifications",
      "newUnansweredChat": "New unanswered chat",
      "newForwardedChat": "New forwarded chat",
      "useAutocorrect": "Text auto corrector"
    }
  },
  "chat": {
    "unanswered": "Unanswered",
    "forwarded": "Forwarded",
    "redirectedMessage": "{{from}} redirected the conversation to user {{to}} {{date}}",
    "history": {
      "title": "History",
      "searchChats": "Search chats",
      "startTime": "Start time",
      "endTime": "End time",
      "csaName": "Customer support name",
      "contact": "Contact",
      "comment": "Comment",
      "label": "Label",
      "nps": "NPS",
      "forwarded": "Forwarded"
    },
    "plainEvents": {
      "answered": "Answered",
      "terminated": "Unspecified",
      "sent_to_csa_email": "Chat sent to CSA email",
      "client-left": "Client left",
      "client_left_with_accepted": "Client left with accepted response",
      "client_left_with_no_resolution": "Client left with no resolution",
      "client_left_for_unknown_reasons": "Client left for unknown reason",
      "accepted": "Accepted response",
      "hate_speech": "Hate speech",
      "other": "Other reasons",
      "response_sent_to_client_email": "Response was sent to client email",
      "greeting": "Greetings",
      "requested-authentication": "Requested authentication",
      "authentication_successful": "Authentication successful",
      "authentication_failed": "Authentication failed",
      "ask-permission": "Asked permission",
      "ask-permission-accepted": "Permission accepted",
      "ask-permission-rejected": "Permission rejected",
      "ask-permission-ignored": "Permission ignored",
      "rating": "Rating",
      "contact-information": "Requested contact information",
      "contact-information-rejected": "Contact information rejected",
      "contact-information-fulfilled": "Contact information fulfilled",
      "requested-chat-forward": "Requested chat forward",
      "requested-chat-forward-accepted": "Requested chat forward accepted",
      "requested-chat-forward-rejected": "Requested chat forward rejected",
      "inactive-chat-ended": "Ended cue to inactivity",
      "contact-information-skipped": "Contact Information Skipped",
      "unavailable-contact-information-fulfilled": "Contact information provided",
      "unavailable_organization": "Organization Unavailable",
      "unavailable_csas": "CSA's Unavailable",
      "unavailable_holiday": "Holiday",
      "message-read": "Read",
      "user-reached": "User contacted",
      "user-not-reached": "User could not be reached"
    },
    "status": {
      "active": "Active",
      "ended": "Ended"
    },
    "event": {
      "answered": "Vestlus lõppes rahuldava vastusega",
      "terminated": "Vestlus lõpetati muudel põhjustel",
      "client-left": "Vestlus lõppes kuna kasutaja lahkus",
      "client-left-with-accepted": "",
      "client-left-with-no-resolution": "",
      "client-left-for-unknown-reason": "",
      "accepted": "",
      "hate-speech": "",
      "other": "",
      "response-sent-to-client-email": "",
      "authenticate": "Palume toimingu sooritamiseks isik tuvastada",
      "ask-permission": "Palume toimingu sooritamiseks nõusolekut",
      "ask-permission-accepted": "Nõusolek toimingu sooritamiseks antud",
      "ask-permission-rejected": "Nõusolekust toimingu sooritamiseks keelduti",
      "ask-permission-ignored": "Nõusolekut toimingu sooritamiseks eirati",
      "redirected": "{{from}} redirected the conversation to user {{to}} {{date}}",
      "contact-information": "Palume sisestada oma kontaktandmed",
      "contact-information-rejected": "Kasutaja keeldus kontaktinfot jagamast",
      "requested-chat-forward": "Suunamise päring edastati kasutajale",
      "requested-chat-forward-accepted": "Kasutaja nõustus suunamisega, vestlus lõpetatud",
      "requested-chat-forward-rejected": "Kasutaja keeldus suunamisest"
    }
  },
  "submit": {
    "slotNameRequired": "Name is required",
    "slotCantBeEmpty": "Slot name can't be empty"
  },
  "axios": {
    "error": {
      "formRulesDependency": "Deleting a form is forbidden because it has relation to rules",
      "formStoriesDependency": "Deleting a form is forbidden because it has relation to stories",
      "formNotFound": "Can't find form to delete."
    }
  },
  "connectionRequests": {
    "title": "Connection Requests",
    "approvedConnection": "Connection Approved",
    "declinedConnection": "Connection Declined",
    "connect": "Connect",
    "service": "Service",
    "noServiceAvailable": "No service available to be connected",
    "searchServices": "Search services",
    "connectIntentToService": "Connect intent to service",
    "connectionQuestion": "Are you sure you want to connect to this service?",
    "toast": {
      "requestedConnection": "Connection Requested",
      "failed": {
        "requests": "Failed to retreive connection requests",
        "requestConnection": "Connection Request failed",
        "availableServices": "Failed to retrieve available services"
      }
    }
  }
}
