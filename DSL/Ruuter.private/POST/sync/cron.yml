assignCronFileLocation:
  assign:
    cronFileLocation: '/DSL/CronManager/train-bot.yml'

getFromDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-train-settings"
  result: dbResult

validateDbRecords:
  switch:
    - condition: ${dbResult.response.body.length !== 0}
      next: checkCronFile
  next: returnError

checkCronFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/check"
    body:
      file_path: ${cronFileLocation}
  result: fileExists

assignValues:
  assign:
    daysOfWeek: ${dbResult.response.body[0].daysOfWeek}
    fromDate: ${dbResult.response.body[0].fromDate}
    scheduled: ${dbResult.response.body[0].scheduled}
    cornExists: ${fileExists.response.body}

checkForDeletion:
  switch:
    - condition: ${fileExists && !scheduled}
      next: deleteCronTask
    - condition: ${!fileExists && !scheduled}
      next: returnSuccess
  next: generateCronExpression

deleteCronTask:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/delete"
    body:
      file_path: ${cronTask}
  result: deleted
  next: returnSuccess

generateCronExpression:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/cron/generate-expression-date-days"
    body:
      date: ${fromDate}
      days: ${daysOfWeek}
  result: cronExpression

createCronJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-cron-file"
    body:
      cronExpression: ${cronExpression.response.body.expression}
      type: "http"
      method: "GET"
      url: "[#TRAINING_BOT]/train"
      startDate: ${cronExpression.response.body.startDate}
  result: cronJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      train_bot: ${cronJson.response.body.data}
  result: cronYaml

saveCronFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${cronFileLocation}
      content: ${cronYaml.response.body.json}
  result: fileResult

refreshCronManager:
  call: http.post
  args:
    url: "[#CRON_MANAGER]/reload/CronManager"
  result: cronResult
  next: returnSuccess

returnSuccess:
  return: "Cron Task updated."
  next: end

returnError:
  return: "Could not get data from DB."
  next: end