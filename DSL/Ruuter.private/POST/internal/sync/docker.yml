declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'DOCKER'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

getFromDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-train-settings"
  result: dbResult

validateDbRecords:
  switch:
    - condition: ${dbResult.response.body.length !== 0}
      next: assignValues
  next: returnError

assignValues:
  assign:
    rasaFolds: ${dbResult.response.body[0].rasaFolds}

getDockerFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/docker-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: dockerData

validateEntryExists:
  switch:
    - condition: ${dockerData.response.body.services['test-bot-cv'].command.includes('--folds')}
      next: updateEntry
  next: returnIncorrectDocker

updateEntry:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/object/array/replace-next-element"
    body:
      array: ${dockerData.response.body.services['test-bot-cv'].command}
      element: '--folds'
      newInput: ${rasaFolds}
  result: updatedArray
  next: updateDockerCompose

updateDockerCompose:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/docker/update-parameter-by-key"
    body:
      object: ${dockerData.response.body}
      serviceName: 'test-bot-cv'
      paramName: 'command'
      newValue: ${updatedArray.response.body.array}
  result: updatedDocker

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json_to_yaml"
    body:
      version: ${updatedDocker.response.body.version}
      services: ${updatedDocker.response.body.services}
      networks: ${updatedDocker.response.body.networks}
  result: dockerYaml

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

saveDockerFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${fileLocations.response.body.response.docker_location}
      content: ${dockerYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Docker updated."
  next: end

returnIncorrectDocker:
  return: "Docker structure is incorrect."
  next: end

returnError:
  return: "Could not get data from DB."
  next: end
