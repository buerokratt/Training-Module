declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'CRON'"
  method: post
  accepts: json
  returns: json
  namespace: training

assignCronFileLocation:
  assign:
    cronFileLocation: "/DSL/CronManager/train-bot.yml"

getFromDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-train-settings"
  result: dbResult

validateDbRecords:
  switch:
    - condition: ${dbResult.response.body.length !== 0}
      next: checkCronFile
  next: returnError

checkCronFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/exists"
    body:
      file_path: ${cronFileLocation}
  result: fileExists

assignValues:
  assign:
    daysOfWeek: ${dbResult.response.body[0].daysOfWeek}
    fromDate: ${dbResult.response.body[0].fromDate}
    scheduled: ${dbResult.response.body[0].scheduled}
    cornExists: ${fileExists.response.body}

checkForDeletion:
  switch:
    - condition: ${fileExists.response.body.error === false && !scheduled}
      next: deleteCronTask
    - condition: ${fileExists.response.body.error === true && !scheduled}
      next: returnSuccess
  next: generateCronExpression

deleteCronTask:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/delete"
    body:
      file_path: ${cronTask}
  result: deleted
  next: returnSuccess

generateCronExpression:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/cron/generate-expression-date-days"
    body:
      date: ${fromDate}
      days: ${daysOfWeek}
  result: cronExpression

createCronJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_cron_file"
    headers:
      type: "json"
    body:
      cronExpression: ${cronExpression.response.body.expression}
      type: "http"
      method: "GET"
      startDate: ${cronExpression.response.body.startDate}
      url: "[#TRAINING_PUBLIC_RUUTER]/rasa/model/init-train"
  result: cronJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json_to_yaml"
    body:
      train_bot: ${cronJson.response.body}
  result: cronYaml

saveCronFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${cronFileLocation}
      content: ${cronYaml.response.body.json}
  result: fileResult

refreshCronManager:
  call: http.post
  args:
    url: "[#CRON_MANAGER]/reload/CronManager"
  result: cronResult
  next: returnSuccess

returnSuccess:
  return: "Cron Task updated."
  next: end

returnError:
  return: "Could not get data from DB."
  next: end
