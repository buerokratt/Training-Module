assign_values:
  assign:
    intent: ${incoming.body.newName.replaceAll(/\s+/g, "_")}
    intent_old_name: ${incoming.body.oldName.replaceAll(/\s+/g, "_")}

validateInputLength:
  switch:
    - condition: ${intent.length > 2}
      next: getIntentList
  next: returnTooShortError

getIntentList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/intents"
    headers:
      cookie: ${incoming.headers.cookie}
  result: intentList

validateIntentExists:
  switch:
    - condition: ${!intentList.response.body}
      next: returnIntentExists
    - condition: ${intentList.response.body.includes(intent)}
      next: returnIntentExists
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent_old_name + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body}
      next: getRulesFile
  next: assignTmpFilePath

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: rulesFile

convertRulesYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${rulesFile.response.body.file}
  result: rulesData

convertRulesJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      rules: ${rulesData.response.body.rules}
  result: rulesYaml

updateRules:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${rulesYaml.response.body.json}
      search: ${"intent:" + " " + intent_old_name}
      replace: ${"intent:" + " " + intent}
  result: updatedRules

saveRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
      content: ${updatedRules.response.body}
  result: rulesFileResult
  next: getStoriesFile

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertStoriesYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

convertStoriesJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      stories: ${storiesData.response.body.stories}
  result: storiesYaml

updateStories:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${storiesYaml.response.body.json}
      search: ${"intent:" + " " + intent_old_name}
      replace: ${"intent:" + " " + intent}
  result: updatedStories

saveStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
      content: ${updatedStories.response.body}
  result: storiesFileResult
  next: getIntentFile

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent_old_name + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body}
      next: getIntentFile
  next: returnIntentFileMissing

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent_old_name + file_end}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${intentFile.response.body.file}
  result: intentData

checkIfIntentEmpty:
  switch:
    - condition: ${intentData.response.body.nlu[0] != undefined}
      next: replaceString

assignEmptyExamples:
  assign:
    examplesToWriteIntoYml: []
  next: mapIntentsData

replaceString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${intentData.response.body.nlu[0].examples}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/split"
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

assignExamples:
  assign:
    examplesToWriteIntoYml: ${splitExamples.response.body}

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intent-file"
    body:
      intent: ${intent}
      examples: ${examplesToWriteIntoYml}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body.data}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
      content: ${intentYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${intentYaml.response.body.json}
      search: "|"
      replace: ""
  result: pipelineIntent

removeOldIntentFromPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/intents"
    body:
      id: ${intent_old_name}
  result: updateSearchResult

addNewIntentInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/intents/intent"
    body:
      input: ${pipelineIntent.response.body}
  result: updateSearchResult

addInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-intent"
    body:
      intent: ${incoming.body.newName}
      status: "ACTIVE"
  result: addInDatabaseResult

deleteOldIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/delete-intent"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent_old_name + file_end}
  result: deleted

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateExistsInDomain:
  switch:
    - condition: ${domainData.response.body.response.intents.includes(intent_old_name)}
      next: mergeIntents
  next: returnSuccess

mergeIntents:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge"
    body:
      array1: ${domainData.response.body.response.intents}
      array2: ${[intent]}
  result: mergedIntents

replaceExistingIntent:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/replace-array-element"
    body:
      element: ${intent_old_name}
      newValue: ${intent}
      array: ${domainData.response.body.response.intents}
  result: updatedIntents

convertDomainJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${updatedIntents.response.body}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Intent updated"
  next: end

returnTooShortError:
  return: "Intent name is too short"
  next: end

returnIntentExists:
  return: "Intent with that name already exists"
  next: end

returnIntentMissing:
  return: "Intent to update is missing"
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  next: end
