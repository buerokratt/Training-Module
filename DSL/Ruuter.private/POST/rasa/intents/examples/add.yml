assign_values:
  assign:
    intentName: ${incoming.body.intentName.replaceAll(/\s+/g, "_")}
    intentExamples: ${incoming.body.intentExamples}
    newExamples: ${incoming.body.newExamples}

validateArrayExampleLength:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/validate/array-elements-length"
    body:
      array: ${intentExamples}
      length: 500
  result: isValid

validateLength:
  switch:
    - condition: ${isValid.response.body}
      next: getFileLocations
  next: returnExampleTooLong

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intentName + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body}
      next: getIntentFile
  next: assignTmpFilePath

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intentName + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body}
      next: getIntentFile
  next: returnIntentFileMissing

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intentName + file_end}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${intentFile.response.body.file}
  result: intentData

checkIfIntentEmpty:
  switch:
    - condition: ${intentData.response.body.nlu[0] != undefined}
      next: replaceString

assignEmptyExamples:
  assign:
    examplesToWriteIntoYml: []
  next: checkIfExampleIsList

replaceString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${intentData.response.body.nlu[0].examples}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/split"
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

assignExamples:
  assign:
    examplesToWriteIntoYml: ${splitExamples.response.body}

checkIfExampleIsList:
  switch:
    - condition: ${Array.isArray(newExamples)}
      next: mergeExamples
  next: makeArrayFromExamples

makeArrayFromExamples:
  assign:
    newExamples: ${[newExamples]}
  next: mergeExamples

mergeExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge"
    body:
      array1: ${newExamples}
      array2: ${examplesToWriteIntoYml}
  result: mergedExamples

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-intent-file"
    body:
      intent: ${intentName}
      examples: ${mergedExamples.response.body}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body.data}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intentName + file_end}
      content: ${intentYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${intentYaml.response.body.json}
      search: "|"
      replace: ""
  result: pipelineIntent

addNewIntentInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]:[#TRAINING_PIPELINE_PORT]/put/intents/intent"
    body:
      input: ${pipelineIntent.response.body}
  result: updateSearchResult

addInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]:[#TRAINING_RESQL_PORT]/add-intent"
    body:
      intent: ${incoming.body.intentName}
      status: "ACTIVE"
  result: addInDatabaseResult

returnSuccess:
  return: "Examples added"
  next: end

returnExampleTooLong:
  return: "Example is too long"
  next: end

returnTooFewExamples:
  return: "Too few Examples, add more"
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
