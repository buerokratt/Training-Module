declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'ADD'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    body:
      - field: name
        type: string
        description: "Body field 'name'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

validateInputLength:
  switch:
    - condition: ${incoming.body.name.length > 2}
      next: assign_values
  next: returnTooShortError

assign_values:
  assign:
    intent: ${incoming.body.name.replaceAll(/\s+/g, "_")}

getIntentList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/intents"
    headers:
      cookie: ${incoming.headers.cookie}
  result: intentList

validateIntentExists:
  switch:
    - condition: ${!intentList.response.body}
      next: returnIntentsError
    - condition: ${intentList.response.body.includes(intent)}
      next: returnIntentExists
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_intent_file"
    headers:
      type: 'json'
    body:
      intent: ${intent}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json_to_yaml"
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body.data}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + "_nlu.yml.tmp"}
      content: ${intentYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/string-replace"
    body:
      data: ${intentYaml.response.body.json}
      search: "|"
      replace: ""
  result: pipelineIntent

addInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/intents/intent"
    body:
      input: ${pipelineIntent.response.body}
  result: updateSearchResult

addInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-intent"
    body:
      intent: ${incoming.body.name}
      status: "ACTIVE"
  result: addIntentResult

returnSuccess:
  return: "Intent created"
  next: end

returnTooShortError:
  status: 409
  wrapper: false
  return: "Intent name is too short"
  next: end

returnIntentExists:
  status: 409
  wrapper: false
  return: "Intent with that name already exists"
  next: end

returnIntentsError:
  status: 409
  wrapper: false
  return: "Intents parsing error"
  next: end
