assign_values:
  assign:
    parameters: ${incoming.body}

authenticate:
  template: extract-token
  requestType: post
  headers:
    cookie: ${incoming.headers.cookie}
  body:
    role: "ROLE_ADMINISTRATOR"
  result: permission

validatePermission:
  switch:
    - condition: ${permission}
      next: getDomainFile
  next: returnUnauthorized

getDomainFile:
  call: http.get
  args:
    url: http://localhost:8080/domain-file
    headers:
      cookie: ${cookie}
  result: domainData

validateIntentExists:
  switch:
    - condition: ${domainData.response.body.response.intents.includes(parameters.intent)}
      next: getFileLocations
  next: returnIntentMissing

getFileLocations:
  call: http.get
  args:
    url: http://localhost:8080/return-file-locations
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/check
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body}
      next: getRulesFile
  next: assignTmpFilePath

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/check
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body}
      next: getRulesFile
  next: returnIntentFileMissing

getRulesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertRulesYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

convertRulesJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: "3.0"
      rules: ${rulesData.response.body.rules}
  result: rulesYaml

validateRuleDependency:
  switch:
    - condition: ${rulesYaml.response.body.json.includes("intent:" + " " + parameters.intent)}
      next: returnRuleDependency
  next: getStoriesFile

getStoriesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertStoriesYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

convertStoriesJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: "3.0"
      stories: ${storiesData.response.body.stories}
  result: storiesYaml

validateStoriesDependency:
  switch:
    - condition: ${storiesYaml.response.body.json.includes("intent:" + " " + parameters.intent)}
      next: returnStoriesDependency
  next: getIntentFile

getIntentFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${intentFile.response.body.file}
  result: intentData

replaceString:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/string/replace
    body:
      data: ${intentData.response.body.nlu[0].examples}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/string/split
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

mapIntentsData:
  call: http.post
  args:
    url: http://host.docker.internal:3000/dmapper/get-intent-file
    body:
      intent: ${parameters.intent}
      examples: ${splitExamples.response.body}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/write
    body:
      file_path: ${fileLocations.response.body.response.intents_location + "removed/" + parameters.intent + file_end}
      content: ${intentYaml.response.body.json}
  result: fileResult

deleteOldIntentFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/delete
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + file_end}
  result: deleted

deleteExistingIntent:
  call: http.post
  args:
    url: http://host.docker.internal:3000/merge/remove-array-value
    body:
      array: ${domainData.response.body.response.intents}
      value: ${parameters.intent}
  result: updatedIntents

convertDomainJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: ${domainData.response.body.response.version}
      intents: ${updatedIntents.response.body}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

saveDomainFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/write
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Intent updated"
  next: end

returnTooShortError:
  return: "Intent name is too short"
  next: end

returnIntentExists:
  return: "Intent with that name already exists"
  next: end

returnIntentMissing:
  return: "Intent to update is missing"
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  next: end

returnRuleDependency:
  return: "Intent has dependency with rules"
  next: end

returnStoriesDependency:
  return: "Intent has dependency with stories"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
