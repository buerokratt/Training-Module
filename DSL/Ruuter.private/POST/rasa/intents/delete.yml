assign_values:
  assign:
    parameters: ${incoming.body}
    intent: ${incoming.body.name.replaceAll(/\s+/g, "_")}

getIntentList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/intents"
    headers:
      cookie: ${incoming.headers.cookie}
  result: intentList

validateIntentExists:
  switch:
    - condition: ${!intentList.response.body}
      next: returnIntentMissing
    - condition: ${!intentList.response.body.includes(intent)}
      next: returnIntentMissing
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body}
      next: getRulesFile
  next: assignTmpFilePath

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/check"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body}
      next: getRulesFile
  next: returnIntentFileMissing

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertRulesYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

convertRulesJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      rules: ${rulesData.response.body.rules}
  result: rulesYaml

validateRuleDependency:
  switch:
    - condition: ${rulesYaml.response.body.json.includes("intent:" + " " + parameters.name)}
      next: returnRuleDependency
  next: getStoriesFile

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertStoriesYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

convertStoriesJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      stories: ${storiesData.response.body.stories}
  result: storiesYaml

validateStoriesDependency:
  switch:
    - condition: ${storiesYaml.response.body.json.includes("intent:" + " " + parameters.name)}
      next: returnStoriesDependency
  next: getIntentFile

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${intentFile.response.body.file}
  result: intentData

checkIfIntentEmpty:
  switch:
    - condition: ${intentData.response.body.nlu[0] != undefined}
      next: replaceString

assignEmptyExamples:
  assign:
    examplesToWriteIntoYml: [ ]
  next: mapIntentsData

replaceString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${intentData.response.body.nlu[0].examples}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/split"
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

assignExamples:
  assign:
    examplesToWriteIntoYml: ${splitExamples.response.body}

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intent-file"
    body:
      intent: ${parameters.name}
      examples: ${examplesToWriteIntoYml}
  result: intentFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body}
  result: intentYaml

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + "removed/" + intent + file_end}
      content: ${intentYaml.response.body.json}
  result: fileResult

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateExistsInDomain:
  switch:
    - condition: ${domainData.response.body.response.intents.includes(intent)}
      next: mergeIntents
  next: deleteOldIntentFile

removeFromDomainArray:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/remove-array-value"
    body:
      array: ${domainData.response.body.response.intents}
      value: ${intent}
  result: updatedIntents

convertDomainJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${updatedIntents.response.body}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult

deleteOldIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/delete"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: deleted

deleteInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/intents"
    body:
      id: ${intent}
  result: updateSearchResult

deleteInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-intent"
    body:
      intent: ${incoming.body.name}
      status: "DELETED"
  result: getIntentLastChangedResult

returnSuccess:
  return: "Intent updated"
  next: end

returnTooShortError:
  return: "Intent name is too short"
  wrapper: false
  status: 409
  next: end

returnIntentExists:
  return: "Intent with that name already exists"
  wrapper: false
  status: 409
  next: end

returnIntentMissing:
  return: "Intent to update is missing"
  wrapper: false
  status: 409
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  wrapper: false
  status: 409
  next: end

returnRuleDependency:
  return: "Intent has dependency with rules"
  wrapper: false
  status: 409
  next: end

returnStoriesDependency:
  return: "Intent has dependency with stories"
  wrapper: false
  status: 409
  next: end
