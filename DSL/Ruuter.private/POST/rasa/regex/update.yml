assign_values:
  assign:
    parameters: ${incoming.body}

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
  result: regexFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${regexFile.response.body.file}
  result: regexData

mapRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-regex-with-regex"
    body:
      regexes: ${regexData.response.body.nlu}
      regex_name: ${parameters.regex_name}
  result: regexesData

validateRegexExists:
  switch:
    - condition: ${regexesData.response.body.data.regex.includes(parameters.regex_name)}
      next: removeQuotes
  next: returnRegexIsMissing

removeQuotes:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${regexesData.response.body.data.examples}
      search: "&quot;"
      replace: ""
  result: removedQuotes

updateExample:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${removedQuotes.response.body}
      search: ${parameters.input.example}
      replace: ${parameters.input.newExample}
  result: updatedExamples
  next: removeHyphens

removeHyphens:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${updatedExamples.response.body}
      search: "- "
      replace: ""
  result: removedHyp

revertHyphens:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${removedHyp.response.body}
      search: "[]"
      replace: "[- ]"
  result: revertedHyp
  next: splitExamples

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/split"
    body:
      data: ${revertedHyp.response.body}
      separator: "\n"
  result: splitExamples

mapUpdatedRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-regex-examples"
    body:
      regex: ${parameters.input.regex}
      examples: ${splitExamples.response.body}
  result: mappedUpdatedExamples

mergeRegexes:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge"
    body:
      array1: ${regexData.response.body.nlu}
      array2: ${mappedUpdatedExamples.response.body.data}
      iteratee: "regex"
  result: mergedRegexes

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${mergedRegexes.response.body}
  result: regexYaml
  next: saveRegexFile

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
      content: ${regexYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${regexYaml.response.body.json}
      search: "|"
      replace: ""
  result: result

updateRegexOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/regexes/regex"
    body:
      input: ${result.response.body}
  result: updatedOpenSearch
  next: returnSuccess

returnSuccess:
  return: "Regex updated"
  next: end

returnRegexIsMissing:
  return: "Can't find regex to update"
  status: 409
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
