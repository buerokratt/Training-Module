assign_values:
  assign:
    regex: ${incoming.body}

getRegexesList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/regexes"
    headers:
      cookie: ${incoming.headers.cookie}
  result: regexes

validateNewRegexNotExists:
  switch:
    - condition: ${regexes.response.body.response.data.regexes.some(reg => reg.name === regex.newName)}
      next: returnRegexExists
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

assignFilePaths:
  assign:
    oldPath: ${fileLocations.response.body.response.regex_location + regex.name  + "_nlu.yml"}
    newPath: ${fileLocations.response.body.response.regex_location + regex.newName  + "_nlu.yml"}

getRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/read-file"
    body:
      file_path: ${oldPath}
  result: regexFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/yaml_to_json"
    body:
      file: ${regexFile.response.body.file}
  result: regexData

mapRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/new_regex_file"
    headers:
      type: 'json'
    body:
      examples: ${JSON.stringify(regexData.response.body.nlu[0].examples)}
      regex: ${regex.newName}
  result: regexesData

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json_to_yaml"
    body:
      version: "3.0"
      nlu: ${regexesData.response.body.data}
  result: regexYaml
  next: saveRegexFile

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${newPath}
      content: ${regexYaml.response.body.json}
  result: fileResult

updateRegexOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/regexes/regex"
    body:
      input: ${regexYaml.response.body.json}
  result: updatedOpenSearch

removeOldFile:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/regex/delete"
    body:
      regex_name: ${regex.name}
    headers:
      cookie: ${incoming.headers.cookie}
  result: regexes

returnSuccess:
  return: "Regex updated"
  next: end

returnRegexIsMissing:
  return: "Can't find regex to update"
  wrapper: false
  status: 409
  next: end

returnRegexExists:
  return: "Regex with that name already exists"
  status: 409
  wrapper: false
  next: end
