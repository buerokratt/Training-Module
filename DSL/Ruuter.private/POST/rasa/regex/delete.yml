assign_values:
  assign:
    parameters: ${incoming.body}

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
  result: regexFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${regexFile.response.body.file}
  result: regexData

mapRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-regex-with-regex"
    body:
      regexes: ${regexData.response.body.nlu}
      regex_name: ${parameters.regex_name}
  result: regexesData

validateRegexExists:
  switch:
    - condition: ${regexesData.response.body.data.regex.includes(parameters.regex_name)}
      next: replaceJsonString
  next: returnRegexIsMissing

replaceJsonString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${regexesData.response.body.data.examples}
      search: "&quot;"
      replace: ""
  result: replacedJsonString

replaceString:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${replacedJsonString.response.body}
      search: "- "
      replace: ""
  result: replacedString

returnHyphens:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${replacedString.response.body}
      search: "[]"
      replace: "[- ]"
  result: updatedString

splitExamples:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/split"
    body:
      data: ${updatedString.response.body}
      separator: "\n"
  result: splitExamples

exampleExists:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/check-value-exists"
    body:
      examples: ${splitExamples.response.body}
      example_name: ${parameters.example}
  result: checkedExamples

validateExampleExists:
  switch:
    - condition: ${checkedExamples.response.body.data}
      next: deleteRegex
  next: returnExampleIsMissing

deleteRegex:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge/remove-array-value"
    body:
      array: ${splitExamples.response.body}
      value: ${parameters.example}
  result: deletedRegex

mapRegexInput:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-regex-example"
    body:
      regex: ${parameters.regex_name}
      examples: ${deletedRegex.response.body}
  result: mappedRegexInput

mergeRegexes:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge"
    body:
      array1: ${regexData.response.body.nlu}
      array2: ${mappedRegexInput.response.body.data}
      iteratee: "regex"
  result: mergedRegexes

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${mergedRegexes.response.body}
  result: regexYaml

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
      content: ${regexYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/string/replace"
    body:
      data: ${regexYaml.response.body.json}
      search: "|"
      replace: ""
  result: result

updateRegexOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]:[#TRAINING_PIPELINE_PORT]/put/regexes/regex"
    body:
      input: ${result.response.body}
  result: updatedRegex
  next: returnSuccess

returnSuccess:
  return: "Regex deleted"
  next: end

returnRegexIsMissing:
  return: "Can't find regex to delete"
  next: end

returnExampleIsMissing:
  return: "Can't find example to delete"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
