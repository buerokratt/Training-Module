assign_values:
  assign:
    parameters: ${incoming.body}
    cookie: ${incoming.headers.cookie}

extractTokenData:
  call: http.post
  args:
    url: http://localhost:8080/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: getFileLocations
  next: returnUnauthorized

getFileLocations:
  call: http.get
  args:
    url: http://localhost:8080/return-file-locations
  result: fileLocations

getRegexFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
  result: regexFile

convertYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${regexFile.response.body.file}
  result: regexData

mapRegexesData:
  call: http.post
  args:
    url: http://host.docker.internal:3000/dmapper/get-regex-with-regex
    body:
      regexes: ${regexData.response.body.nlu}
      regex_name: ${parameters.regex_name}
  result: regexesData

replaceJsonString:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/string/replace
    body:
      data: ${regexesData.response.body.examples}
      search: "&quot;"
      replace: ""
  result: replacedJsonString

replaceString:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/string/replace
    body:
      data: ${replacedJsonString.response.body}
      search: "- "
      replace: ""
  result: replacedString

splitExamples:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/string/split
    body:
      data: ${replacedString.response.body}
      separator: "\n"
  result: splitExamples

mapExamples:
  call: http.post
  args:
    url: http://host.docker.internal:3000/dmapper/get-regex-with-example
    body:
      examples: ${splitExamples.response.body}
      example_name: ${parameters.example}
  result: mappedExamples

returnSuccess:
  return: ${mappedExamples.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
