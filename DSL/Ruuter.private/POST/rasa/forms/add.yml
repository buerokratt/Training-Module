assign_values:
  assign:
    parameters: ${incoming.body}
    formData:
      required_slots: ${parameters.form.required_slots}
      ignored_intents: ${parameters.form.ignored_intents}

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateForms:
  switch:
    - condition: ${domainData.response.body.response.forms[parameters.form_name] == null}
      next: mapForm
  next: returnFormExists

mapForm:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-form"
    body:
      form: ${parameters.form}
  result: mappedForm

mergeForms:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/objects"
    body:
      object1: ${domainData.response.body.response.forms}
      object2: ${mappedForm.response.body.data}
  result: mergedForms

convertResponseInput:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-form-responses"
    body:
      responses: ${parameters.responses}
      form_name: ${parameters.form.name}
  result: mappedResponses

mergeResponses:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/objects"
    body:
      object1: ${domainData.response.body.response.responses}
      object2: ${mappedResponses.response.body.data}
  result: mergedResponses

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${mergedForms.response.body}
      actions: ${domainData.response.body.response.actions}
      responses: ${mergedResponses.response.body}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult

updateDomainOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/domain"
    body:
      input: ${domainYaml.response.body.json}
  result: updateSearchResult

returnSuccess:
  return: "Form added"
  next: end

returnFormExists:
  return: "Form exists"
  wrapper: false
  status: 409
  next: end