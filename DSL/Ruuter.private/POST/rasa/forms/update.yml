assign_values:
  assign:
    parameters: ${incoming.body}
  next: getDomainFile

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateForms:
  switch:
    - condition: ${domainData.response.body.response.forms[parameters.form_name] != null}
      next: mergeForms
  next: returnFormIsMissing

mergeForms:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge/objects"
    body:
      object1: ${domainData.response.body.response.forms}
      object2: ${parameters.form}
  result: mergedForms

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${mergedForms.response.body}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Form updated"
  next: end

returnFormIsMissing:
  return: "Can't find form to update"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
