assign_values:
  assign:
    slot: ${incoming.body.slotName}
  next: getDomainFile

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateSlots:
  switch:
    - condition: ${domainData.response.body.response.slots[slot] != null && Object.keys(domainData.response.body.response.slots).includes(slot)}
      next: formSlots
  next: returnSlotIsMissing

formSlots:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/forms/search"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      slot: ${slot}
  result: formSlots

validateFormSlots:
  switch:
    - condition: ${formSlots.response.body.response.data.forms.length == 0}
      next: ruleSlots
  next: returnSlotHasDependencyToForms

ruleSlots:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/rules/search"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      value: ${slot}
      type: "slots"
  result: ruleSlots

validateRuleSlots:
  switch:
    - condition: ${ruleSlots.response.body.response.data.rules.length == 0}
      next: storiesSlots
  next: returnSlotHasDependencyToRules

storiesSlots:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/stories/search"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      slot: ${slot}
      type: "slots"
  result: storiesSlots

validateStoriesSlots:
  switch:
    - condition: ${storiesSlots.response.body.response.data.stories.length == 0}
      next: deleteKey
  next: returnSlotHasDependencyToStories

deleteKey:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/remove-key"
    body:
      object: ${domainData.response.body.response.slots}
      key: ${slot}
  result: keyDeletedData

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${domainData.response.body.response.entities}
      slots: ${keyDeletedData.response.body}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult

updateOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/domain"
    body:
      input: ${domainYaml.response.body.json}
  result: updateSearchResult
  next: returnSuccess

returnSuccess:
  return: "Slot deleted"
  next: end

returnSlotIsMissing:
  return: "Can't find slot to delete"
  next: end

returnSlotHasDependencyToForms:
  return: "Deleting a slot is forbidden because it has relation to forms"
  next: end

returnSlotHasDependencyToRules:
  return: "Deleting a slot is forbidden because it has relation to rules"
  next: end

returnSlotHasDependencyToStories:
  return: "Deleting a slot is forbidden because it has relation to stories"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
