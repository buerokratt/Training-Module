assign_values:
  assign:
    parameters: ${incoming.body}

authenticate:
  template: extract-token
  requestType: post
  headers:
    cookie: ${incoming.headers.cookie}
  body:
    role: "ROLE_ADMINISTRATOR"
  result: permission

validatePermission:
  switch:
    - condition: ${permission}
      next: getDomainFile
  next: returnUnauthorized

getDomainFile:
  call: http.get
  args:
    url: http://localhost:8080/domain-file
    headers:
      cookie: ${cookie}
  result: domainData

validateSlots:
  switch:
    - condition: ${domainData.response.body.response.slots[parameters.slot_name] != null}
      next: formSlots
  next: returnSlotIsMissing

formSlots:
  call: http.post
  args:
    url: http://localhost:8080/rasa/forms/search
    headers:
      cookie: ${cookie}
    body:
      slot: ${parameters.slot_name}
  result: formSlots

validateFormSlots:
  switch:
    - condition: ${formSlots.response.body.response.forms.length == 0}
      next: ruleSlots
  next: returnSlotHasDependencyToForms

ruleSlots:
  call: http.post
  args:
    url: http://localhost:8080/rasa/rules/search
    headers:
      cookie: ${cookie}
    body:
      slot: ${parameters.slot_name}
      type: "slots"
  result: ruleSlots

validateRuleSlots:
  switch:
    - condition: ${ruleSlots.response.body.response.rules.length == 0}
      next: storiesSlots
  next: returnSlotHasDependencyToRules

storiesSlots:
  call: http.post
  args:
    url: http://localhost:8080/rasa/stories/search
    headers:
      cookie: ${cookie}
    body:
      slot: ${parameters.slot_name}
      type: "slots"
  result: storiesSlots

validateStoriesSlots:
  switch:
    - condition: ${storiesSlots.response.body.response.stories.length == 0}
      next: deleteKey
  next: returnSlotHasDependencyToStories

deleteKey:
  call: http.post
  args:
    url: http://host.docker.internal:3000/merge/remove-key
    body:
      object: ${domainData.response.body.response.slots}
      key: ${parameters.slot_name}
  result: keyDeletedData

convertJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${domainData.response.body.response.entities}
      slots: ${keyDeletedData.response.body}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: http://localhost:8080/return-file-locations
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/write
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Slot deleted"
  next: end

returnSlotIsMissing:
  return: "Can't find slot to delete"
  next: end

returnSlotHasDependencyToForms:
  return: "Deleting a slot is forbidden because it has relation to forms"
  next: end

returnSlotHasDependencyToRules:
  return: "Deleting a slot is forbidden because it has relation to rules"
  next: end

returnSlotHasDependencyToStories:
  return: "Deleting a slot is forbidden because it has relation to stories"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
