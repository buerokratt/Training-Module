assign_values:
  assign:
    body: ${incoming.body}

getStoriesWithName:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/stories"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      story: ${body.story}
  result: storiesResult

validateStories:
  switch:
    - condition: ${storiesResult.response.body.response.data.story != body.story}
      next: getFileLocations
  next: returnStoryExists

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

mergeStories:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge"
    body:
      array1: ${storiesData.response.body.stories}
      array2: ${[body]}
      iteratee: "story"
  result: mergedStories

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      stories: ${mergedStories.response.body}
  result: storiesYaml

saveStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
      content: ${storiesYaml.response.body.json}
  result: fileResult

updateOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/stories/story"
    body:
      input: ${storiesYaml.response.body.json}
  result: updateSearchResult
  next: returnSuccess

returnSuccess:
  return: "Story added"
  next: end

returnStoryExists:
  return: "Story exists"
  status: 409
  next: end
