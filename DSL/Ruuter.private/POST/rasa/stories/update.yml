declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'UPDATE'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    body:
      - field: data
        type: string
        description: "Body field 'data'"
      - field: id
        type: string
        description: "Body field 'id'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

assign_values:
  assign:
    id: ${incoming.body.id}
    storyData: ${incoming.body.data}

validateStoriesForDuplicates:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/validate/validate-stories-rules"
    body:
      story: ${storyData}
  result: validateStoriesResult

validateStoriesCheck:
  switch:
    - condition: ${validateStoriesResult.response.body.result == false}
      next: returnDuplicateIntentOrEntity
  next: getStoriesWithName

getStoriesWithName:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/stories"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      story: ${id}
  result: storiesResult

validateStoryExists:
  switch:
    - condition: ${storiesResult.response.body.response.id == id}
      next: returnStoryIsMissing
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/read-file"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/yaml_to_json"
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

deleteStory:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/delete_story"
    headers:
      type: "json"
    body:
      stories: ${storiesData.response.body}
      story_name: ${id}
  result: deleteStoriesData

mergeStories:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/merge"
    body:
      array1: ${deleteStoriesData.response.body[1]}
      array2: ${[storyData]}
      iteratee: "story"
  result: mergedStories

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json-to-yaml-stories"
    body:
      stories: ${mergedStories.response.body.array}
  result: storiesYaml

saveStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
      content: ${storiesYaml.response.body.json}
  result: fileResult

deleteOldOpenSearchEntry:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/stories"
    body:
      id: ${id}
  result: deleteSearchResult

updateOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/stories/story"
    body:
      input: ${storiesYaml.response.body.json}
  result: updateSearchResult
  next: returnSuccess

returnSuccess:
  return: "Story updated"
  next: end

returnStoryIsMissing:
  return: "Can't find story to update"
  status: 409
  next: end

returnDuplicateIntentOrEntity:
  return: "Story may not have duplicate consecutive intents or entities"
  status: 406
  next: end
