assign_values:
  assign:
    body: ${incoming.body}
    cookie: ${incoming.headers.cookie}

extractTokenData:
  call: http.post
  args:
    url: http://localhost:8080/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: getTestStoriesWithName
  next: returnUnauthorized

getStoriesWithName:
  call: http.post
  args:
    url: http://localhost:8080/rasa/stories
    headers:
      cookie: ${cookie}
    body:
      story: ${body.story}
  result: storiesResult

validateStories:
  switch:
    - condition: ${storiesResult.response.body.response.story != null}
      next: getFileLocations
  next: returnStoryIsMissing

getFileLocations:
  call: http.get
  args:
    url: http://localhost:8080/return-file-locations
  result: fileLocations

getStoriesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

convertYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

mergeStories:
  call: http.post
  args:
    url: http://host.docker.internal:3000/merge
    body:
      array1: ${storiesData.response.body.stories}
      array2: ${[body]}
      iteratee: "story"
  result: mergedStories

convertJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: "3.0"
      stories: ${mergedStories.response.body}
  result: storiesYaml

saveStoriesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/write
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
      content: ${storiesYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Story updated"
  next: end

returnStoryIsMissing:
  return: "Can't find story to update"
  next: end
