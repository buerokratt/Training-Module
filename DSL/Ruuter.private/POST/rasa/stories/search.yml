declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'SEARCH'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    body:
      - field: type
        type: string
        description: "Body field 'type'"
      - field: value
        type: string
        description: "Body field 'value'"

assign_values:
  assign:
    params: ${incoming.body}
    type: ${incoming.body.type}
    value: ${incoming.body.value}

checkForIncomingType:
  switch:
    - condition: ${type == "responses"}
      next: getStoriesSearchForResponses
    - condition: ${type == "forms"}
      next: getStoriesSearchForForms
    - condition: ${type == "slots"}
      next: getStoriesSearchForSlots

getStoriesSearch:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/stories"
  result: getStoriesResult
  next: returnNoSearchSpecified

getStoriesSearchForResponses:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/stories/_search/template"
    body:
      id: ${"story-with-" + type}
      params:
        searchField: ${value}
      source:
        query:
          bool:
            should:
              - match:
                  steps.action: "{{searchField}}"
              - match:
                  steps.active_loop: "{{searchField}}"
  result: getStoriesResult
  next: mapStoriesData

getStoriesSearchForForms:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/stories/_search/template"
    body:
      id: ${"story-with-" + type}
      params:
        searchField: ${value}
      source:
        query:
          bool:
            should:
              - match:
                  steps.action: "{{searchField}}"
  result: getStoriesResult
  next: mapStoriesData

getStoriesSearchForSlots:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/stories/_search/template"
    body:
      id: ${"story-with-" + type}
      params:
        searchField: ${value}
      source:
        query:
          bool:
            must:
              - exists:
                  field: "steps.slot_was_set.{{searchField}}"
  result: getStoriesResult

mapStoriesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_stories"
    headers:
      type: 'json'
    body:
      hits: ${getStoriesResult.response.body.hits.hits}
  result: storiesData
  next: returnSuccess

returnSuccess:
  return: ${storiesData.response.body.data.stories}
  next: end

returnNoSearchSpecified:
  return: ${getStoriesResult.response.body.response}
  next: end
