assign_values:
  assign:
    parameters: ${incoming.body}

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

validateEntities:
  switch:
    - condition: ${domainData.response.body.response.entities.includes(parameters.entity_name)}
      next: replaceExistingEntity
  next: returnEntityIsMissing

replaceExistingEntity:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/replace-array-element"
    body:
      element: ${parameters.entity_name}
      newValue: ${parameters.entity}
      array: ${domainData.response.body.response.entities}
  result: replacedEntities

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${domainData.response.body.response.intents}
      entities: ${replacedEntities.response.body}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${domainData.response.body.response.responses}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult

updateDomainOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/domain"
    body:
      input: ${domainYaml.response.body.json}
  result: updateSearchResult

switchFileType:
  switch:
    - condition: ${parameters.intent.includes("regex")}
      next: getRegexFile
  next: getIntentFile

getRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
  result: intentFile
  next: convertYamlToJson

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + "_nlu.yml"}
  result: intentFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${intentFile.response.body.file}
  result: intentData

switchMapFileType:
  switch:
    - condition: ${parameters.intent.includes("regex")}
      next: mapRegexesData
  next: mapIntentsData

mapRegexesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-regex-file"
    body:
      regex: ${parameters.entity}
      examples: ${intentData.response.body.nlu[0].examples}
  result: intentFileJson
  next: convertIntentJsonToYaml

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intent-file"
    body:
      intent: ${parameters.entity}
      examples: ${splitExamples.response.body}
  result: intentFileJson

convertIntentJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${intentFileJson.response.body.data}
  result: intentYaml

switchSaveFileType:
  switch:
    - condition: ${parameters.intent.includes("regex")}
      next: saveRegexFile
  next: saveIntentFile

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.regex_location}
      content: ${intentYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${intentYaml.response.body.json}
      search: "|"
      replace: ""
  result: result

updateRegexOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/regexes/regex"
    body:
      input: ${result.response.body}
  result: returnSuccess

saveIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + parameters.intent + "_nlu.yml"}
      content: ${intentYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Entity updated"
  next: end

returnEntityIsMissing:
  return: "Can't find entity to update"
  status: 409
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
