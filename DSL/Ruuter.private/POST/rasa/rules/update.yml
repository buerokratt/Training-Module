assign_values:
  assign:
    body: ${incoming.body}

getRuleWithName:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/rasa/rules"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      rule: ${body.rule}
  result: ruleResult

validateRules:
  switch:
    - condition: ${ruleResult.response.body.response.data.rule == body.rule}
      next: getFileLocations
  next: returnRulesIsMissing

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

mergeRules:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/merge"
    body:
      array1: ${rulesData.response.body.rules}
      array2: ${[body]}
      iteratee: "rule"
  result: mergedRules

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/json-to-yaml"
    body:
      version: "3.0"
      rules: ${mergedRules.response.body}
  result: rulesYaml

saveRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
      content: ${rulesYaml.response.body.json}
  result: fileResult
  next: updateOpenSearch

updateOpenSearch:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/bulk/rules/rule"
    body:
      input: ${rulesYaml.response.body.json}
  result: updateSearchResult
  next: returnSuccess

returnSuccess:
  return: "Rule updated"
  next: end

returnRulesIsMissing:
  return: "Can't find rule to update"
  next: end
