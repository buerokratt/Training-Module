assign_values:
  assign:
    type: ${incoming.body.type}
    value: ${incoming.body.value}

checkForIncomingType:
  switch:
    - condition: ${type == "responses"}
      next: getRulesSearchForResponses
    - condition: ${type == "forms"}
      next: getRulesSearchForForms
    - condition: ${type == "slots"}
      next: getRulesSearchForSlots
    - condition: ${type === undefined}
      next: getRulesSearch

getRulesSearch:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      source:
        query:
          match_all: {}
  result: mapRulesData

getRulesSearchForResponses:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      id: ${"rule-with-responses"}
      source:
        query:
          match:
            "steps.action": ${value}
  result: getRulesResult
  next: mapRulesData

getRulesSearchForForms:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      id: ${"rule-with-forms"}
      source:
        query:
          bool:
            should:
              - match:
                  steps.action: ${value}
              - match:
                  steps.active_loop: ${value}
  result: getRulesResult
  next: mapRulesData

getRulesSearchForSlots:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      id: ${"rule-with-slots"}
      params:
        slotname: ${value}
      source:
        query:
          bool:
            should:
              - exists:
                  field: "condition.slot_was_set.{{slotname}}"
  result: getRulesResult
  next: mapRulesData

mapRulesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-rules"
    body:
      hits: ${getRulesResult.response.body.hits.hits}
  result: rulesData
  next: returnSuccess

returnSuccess:
  return: ${rulesData.response.body}
  next: end
