assign_values:
  assign:
    rule: ${incoming.body.rule}

getRuleWithName:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/rules"
    headers:
      cookie: ${incoming.headers.cookie}
    body:
      rule: ${rule}
  result: ruleResult

validateRules:
  switch:
    - condition: ${ruleResult.response.body.response.data.rule == rule}
      next: getFileLocations
  next: returnRulesIsMissing

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/yaml-to-json"
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

deleteRule:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/delete-rule"
    body:
      rules: ${rulesData.response.body.rules}
      rule_name: ${rule}
  result: deleteRulesData

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml-stories"
    headers:
      content-type: "application/json"
    body:
      rules: ${deleteRulesData.response.body.data}
  result: rulesYaml

saveRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
      content: ${rulesYaml.response.body.json}
  result: fileResult
  next: deleteOpenSearchEntry

deleteOpenSearchEntry:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/rules"
    body:
      id: ${rule}
  result: deleteSearchResult

returnSuccess:
  return: "Rule deleted"
  next: end

returnRulesIsMissing:
  return: "Can't find rule to delete"
  next: end
