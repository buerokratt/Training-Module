assign_values:
  assign:
    body: ${incoming.body}

authenticate:
  template: extract-token
  requestType: post
  headers:
    cookie: ${incoming.headers.cookie}
  body:
    role: "ROLE_ADMINISTRATOR"
  result: permission

validatePermission:
  switch:
    - condition: ${permission}
      next: getTestStoriesWithName
  next: returnUnauthorized

getRuleWithName:
  call: http.post
  args:
    url: http://localhost:8080/rasa/rules
    headers:
      cookie: ${cookie}
    body:
      rule: ${body.rule}
  result: ruleResult

validateRules:
  switch:
    - condition: ${ruleResult.response.body.response.rule == null}
      next: getFileLocations
  next: returnRuleExists

getFileLocations:
  call: http.get
  args:
    url: http://localhost:8080/return-file-locations
  result: fileLocations

getRulesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/read
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertYamlToJson:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/yaml-to-json
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

mergeRules:
  call: http.post
  args:
    url: http://host.docker.internal:3000/merge
    body:
      array1: ${rulesData.response.body.rules}
      array2: ${[body]}
      iteratee: "rule"
  result: mergedRules

convertJsonToYaml:
  call: http.post
  args:
    url: http://host.docker.internal:3000/convert/json-to-yaml
    body:
      version: "3.0"
      rules: ${mergedRules.response.body}
  result: rulesYaml

saveRulesFile:
  call: http.post
  args:
    url: http://host.docker.internal:3000/file/write
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
      content: ${rulesYaml.response.body.json}
  result: fileResult
  next: returnSuccess

returnSuccess:
  return: "Rule added"
  next: end

returnRuleExists:
  return: "Rule exists"
  status: 409
  next: end
