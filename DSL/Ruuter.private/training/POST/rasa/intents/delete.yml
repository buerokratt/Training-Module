declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'DELETE'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    body:
      - field: name
        type: string
        description: "Body field 'name'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

assign_values:
  assign:
    parameters: ${incoming.body}
    intent: ${incoming.body.name.replaceAll(/\s+/g, "_")}

getIntentList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/intents"
    headers:
      cookie: ${incoming.headers.cookie}
  result: intentList

validateIntentExists:
  switch:
    - condition: ${!intentList.response.body}
      next: returnIntentMissing
    - condition: ${!intentList.response.body.includes(intent)}
      next: returnIntentMissing
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

assignFilePath:
  assign:
    file_end: "_nlu.yml"

checkIntentFileYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/exists"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: fileExists

validateFileExists:
  switch:
    - condition: ${fileExists.response.body.error === false}
      next: getRulesFile
  next: assignTmpFilePath

assignTmpFilePath:
  assign:
    file_end: "_nlu.yml.tmp"

checkIntentFileTmp:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/exists"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: tmpFileExists

validateTmpFileExists:
  switch:
    - condition: ${tmpFileExists.response.body.error === false}
      next: getRulesFile
  next: returnIntentFileMissing

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/read-file"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

convertRulesYamlToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/yaml_to_json"
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

removeIntentRules:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/object/rules/remove-by-intent-name"
    body:
      rulesJson: ${rulesData.response.body.rules}
      searchIntentName: ${intent}
  result: updatedRules

convertRulesJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json-to-yaml-stories"
    headers:
      content-type: "application/json"
    body:
      version: "3.0"
      rules: ${updatedRules.response.body.result}
  result: rulesYaml

saveRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
      content: ${rulesYaml.response.body.json}
  result: fileResult

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: domainData

removeFromDomainArray:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/merge/remove-array-value"
    body:
      array: ${domainData.response.body.response.intents}
      value: ${intent}
  result: updatedIntents

removeIntentResponses:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/object/responses/remove-by-intent-name"
    headers:
      type: "json"
    body:
      responses: ${domainData.response.body.response.responses}
      intent: ${intent}
  result: updatedResponses

convertDomainJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/conversion/json_to_yaml_domain"
    body:
      version: ${domainData.response.body.response.version}
      intents: ${updatedIntents.response.body}
      entities: ${domainData.response.body.response.entities}
      slots: ${domainData.response.body.response.slots}
      forms: ${domainData.response.body.response.forms}
      actions: ${domainData.response.body.response.actions}
      responses: ${updatedResponses.response.body}
      session_config: ${domainData.response.body.response.session_config}
  result: domainYaml

saveDomainFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/create"
    body:
      file_path: ${fileLocations.response.body.response.domain_location}
      content: ${domainYaml.response.body.json}
  result: fileResult
  next: updateOpenSearchDomain

updateOpenSearchDomain:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/bulk/domain"
    body:
      input: ${domainYaml.response.body.json}
  result: updateSearchResult

deleteOldIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file-manager/delete"
    body:
      file_path: ${fileLocations.response.body.response.intents_location + intent + file_end}
  result: deleted

deleteInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/intents"
    body:
      id: ${intent}
  result: updateSearchResult

deleteInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-intent"
    body:
      intent: ${incoming.body.name}
      status: "DELETED"
  result: getIntentLastChangedResult

getRuleByIntent:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      id: "rule-by-intent"
      params:
        intent: ${intent}
  result: getRuleByIntentResult

validateRuleResponse:
  switch:
    - condition: ${getRuleByIntentResult.response.body.hits.hits[0] != undefined }
      next: deleteOpenSearchRule
  next: returnSuccess

deleteOpenSearchRule:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/delete/object/rules"
    body:
      id: ${getRuleByIntentResult.response.body.hits.hits[0]._source.rule.replaceAll("_", "")}
  result: deleteRuleResult

returnSuccess:
  return: "Intent updated"
  next: end

returnTooShortError:
  return: "Intent name is too short"
  wrapper: false
  status: 409
  next: end

returnIntentExists:
  return: "Intent with that name already exists"
  wrapper: false
  status: 409
  next: end

returnIntentMissing:
  return: "Intent to update is missing"
  wrapper: false
  status: 409
  next: end

returnIntentFileMissing:
  return: "Intent file to update is missing"
  wrapper: false
  status: 409
  next: end
