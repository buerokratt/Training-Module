declaration:
  call: declare
  version: 0.1
  description: "Adds a new model to the database with PROCESSING status"
  method: get
  accepts: json
  returns: json
  namespace: training

assignDefaultValues:
  assign:
    version: "1_0"
    state: "PROCESSING"
    modelType: "RASA"
    modelVersion: "3.0"

getLatestVersionFromDb:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-latest-llm-version"
  result: dbResult

validateDbVersion:
  switch:
    - condition: ${dbResult.response.body.length > 0}
      next: increaseVersion
  next: insertToDatabase

increaseVersion:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/utils/increase-double-digit-version"
    body:
      version: ${dbResult.response.body[0].versionNumber}
  result: updatedVersion

reAssignVersion:
  assign:
    version: ${updatedVersion.response.body}

updateInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-llm-trainings"
    body:
      model_type: ${modelType}
      state: ${state}
      file_name: ""
      version_number: ${version}
      model_version: ${modelVersion}
      test_report: ""
      cross_validation_report: ""
      trained_date: ${new Date().toISOString()}
      training_data_checksum: ""
  result: dbResult
  next: clearModelList

insertToDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-llm-trainings"
    body:
      model_type: ${modelType}
      state: ${state}
      file_name: ""
      version_number: ${version}
      model_version: ${modelVersion}
      test_report: ""
      cross_validation_report: ""
      trained_date: ${new Date().toISOString()}
      training_data_checksum: ""
  result: dbResult

clearModelList:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
      query:
        term:
          channelId: "model-list"
  result: clear_chat_res
  next: postNotificationAboutModel

postNotificationAboutModel:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/notifications/_doc"
    body:
      channelId: "model-list"
      timestamp: ${new Date().toISOString()}
      payload: { "status": "Status Changed", "state": "PROCESSING" }
  result: notification_result
  next: returnSuccess

returnSuccess:
  return: "Inserted model with PROCESSING status. "
  wrapper: false
  next: end
