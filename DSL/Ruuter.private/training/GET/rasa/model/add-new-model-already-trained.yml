declaration:
  call: declare
  version: 0.1
  description: "Adds a new model to the database with ALREADY_TRAINED status"
  method: get
  accepts: json
  returns: json
  namespace: training

getLatestReadyModelFromDb:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-latest-ready-model"
  result: dbModelResult

updateInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/add-llm-trainings"
    body:
      model_type: ${dbModelResult.response.body[0].modelType}
      state: "ALREADY_TRAINED"
      file_name: ${dbModelResult.response.body[0].fileName}
      version_number: ${dbModelResult.response.body[0].versionNumber}
      model_version: ${dbModelResult.response.body[0].modelVersion}
      test_report: ${dbModelResult.response.body[0].testReport}
      cross_validation_report: ${dbModelResult.response.body[0].crossValidationReport}
      trained_date: ${dbModelResult.response.body[0].trainedDate}
      training_data_checksum: ${dbModelResult.response.body[0].trainingDataChecksum}
  result: dbModelResult

clearModelList:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
      query:
        term:
          channelId: "model-list"
  result: clear_chat_res
  next: postNotificationAboutModel

postNotificationAboutModel:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/notifications/_doc"
    body:
      channelId: "model-list"
      timestamp: ${new Date().toISOString()}
      payload: { "status": "Status Changed", "state": "ALREADY_TRAINED" }
  result: notification_result

returnSuccess:
  return: "Inserted model with ALREADY_TRAINED status."
  wrapper: false
  next: end
