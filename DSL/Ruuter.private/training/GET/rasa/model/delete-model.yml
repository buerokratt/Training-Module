declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'DELETE-MODEL'"
  method: get
  accepts: json
  returns: json
  namespace: training
  allowlist:
    params:
      - field: fileName
        type: string
        description: "Parameter 'fileName'"

assignValue:
  assign:
    fileName: ${incoming.params.fileName}

validateName:
  switch:
    - condition: ${fileName.trim().length !== 0}
      next: getModelDataFromDb
  next: returnError

getModelDataFromDb:
  call: http.get
  args:
    url: "[#TRAINING_RESQL]/llm/get_llm_model"
    query:
      fileName: ${fileName}
  result: dbResult

validateRecordExists:
  switch:
    - condition: ${dbResult.response.body.length !== 0}
      next: assignRecord
  next: returnError

assignRecord:
  assign:
    model: ${dbResult.response.body[0]}

updateInDatabase:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/llm/remove_llm_model"
    body:
      model_type: ${model.modelType}
      trained_date: ${model.trainedDate}
      state: "DELETED"
      file_name: ${model.fileName}
      version_number: ${model.versionNumber}
      model_version: ${model.modelVersion}
      test_report: ${model.testReport}
      cross_validation_report: ${model.crossValidationReport}
      training_data_checksum: ${model.trainingDataChecksum}
  result: dbResult
  next: returnSuccess

returnSuccess:
  return: "Model deleted."
  wrapper: true
  next: end

returnError:
  return: "Model not found."
  wrapper: true
  status: 409
  next: end
