declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'FULL'"
  method: get
  accepts: json
  returns: json
  namespace: training
  allowlist:
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

getIntents:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]/intents/_search?size=10000"
  result: getIntentsResult

getIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_intents_with_examples"
    headers:
      type: 'json'
    body:
      hits: ${getIntentsResult.response.body.hits.hits}
  result: getIntentDataResult

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: getDomainDataResult

checkIfIntentsExists:
  switch:
    - condition: ${getIntentDataResult.response.body.intents != null}
      next: get_service_intent_connections
  next: returnNoIntentsFound

get_service_intent_connections:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-service-intent-connections"
  result: connection_res

assignResults:
  assign:
    intents:
      intents: ${getIntentDataResult.response.body.intents}
      inmodel: ${getDomainDataResult.response.body.response.intents}
      connections: ${connection_res.response.body}

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_intents_full"
    headers:
      type: 'json'
    body:
      intents: ${intents}
  result: getIntentDataResult
  next: returnSuccess

returnSuccess:
  return: ${getIntentDataResult.response.body}
  next: end

returnNoIntentsFound:
  return: "Error: no intents found"
  wrapper: false
  status: 409
  next: end
