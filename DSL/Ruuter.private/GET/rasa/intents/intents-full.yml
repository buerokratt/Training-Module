getIntents:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]/intents/_search?size=10000"
  result: getIntentsResult

getIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intents-with-examples"
    body:
      hits: ${getIntentsResult.response.body.hits.hits}
  result: getIntentDataResult

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: getDomainDataResult

getIntentsExampleCount:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/intents/_search/template"
    body:
      id: "intents-with-examples-count"
  result: getIntentCountResult

checkIfIntentsExists:
  switch:
    - condition: ${getIntentDataResult.response.body.data.intents != null}
      next: assignResults
  next: returnNoIntentsFound

assignResults:
  assign:
    intents:
      intents: ${getIntentDataResult.response.body.data.intents}
      inmodel: ${getDomainDataResult.response.body.response.intents}
      count: ${getIntentCountResult.response.body.aggregations.hot.buckets}

mapIntentsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intents-full"
    body:
      intents: ${intents}
  result: getIntentDataResult
  next: returnSuccess

returnSuccess:
  return: ${getIntentDataResult.response.body}
  next: end

returnNoIntentsFound:
  return: "Error: no intents found"
  next: end
