declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'RESPONSES-LIST'"
  method: get
  accepts: json
  returns: json
  namespace: training
  params:
    - field: filter
      type: string
      description: "Query string"
    - field: from
      type: string
      description: "Item number"
    - field: size
      type: string
      description: "Page size"

getResponses:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/domain/_search/template"
    body:
      id: "responses-with-pagination"
      params: ${incoming.params}
  result: getResponsesResult

mapResponsesNames:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_responses_names"
    headers:
      type: "json"
    body:
      data: ${getResponsesResult.response.body.hits.hits[0].fields.filtered_responses[0]}
  result: responsesNames

getStories:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/stories/_search/template"
    body:
      id: "stories-by-responses"
      params:
        responses: "${responsesNames.response.body}"
        size: 1000
  result: getStoriesResult

getRules:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/rules/_search/template"
    body:
      id: "rules-by-responses"
      params:
        responses: "${responsesNames.response.body}"
        size: 1000
  result: getRulesResult

mapResponsesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_responses_dependencies"
    headers:
      type: "json"
    body:
      rules: ${getRulesResult.response.body.hits.hits}
      stories: ${getStoriesResult.response.body.hits.hits}
      responses: ${getResponsesResult.response.body.hits.hits[0].fields.filtered_responses[0]}
  result: responsesData

returnSuccess:
  return: ${responsesData.response.body}
  wrapper: false
  next: end
